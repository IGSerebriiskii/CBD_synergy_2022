tricontext2
tricontext2 %>% rename(trinucleotideContext_SV = tricontext, trinucleotideAlteration_SV = tricontext_sub)
tricontext2 %>% rename(test000 = tricontext_sub)
rename(tricontext2, test000 = tricontext_sub)
tricontext2 %>% colnames()
rename(tricontext2, test000 = tricontext)
library(tidyverse)
rename(tricontext2, test000 = tricontext)
iris <- as_tibble(iris) # so it prints a little nicer
rename(iris, petal_length = Petal.Length)
read_csv("tricontext_MTL_prob.csv") %>%
get_dnds()
iris
tricontext2 %>% dplyr::rename(trinucleotideContext_SV = tricontext, trinucleotideAlteration_SV = tricontext_sub)
get_dnds <- function(filename) {
tricontext = filename
colnames(tricontext) = c("tricontext", "rel_prob")
tricontext = tricontext %>%
mutate(tricontext_sub = str_remove_all(str_extract_all(tricontext, "\\[.+\\]"), "\\[|\\]"),
tricontext = str_remove_all(str_remove_all(tricontext, ">.."), "\\[")) %>%
dplyr::rename(trinucleotideContext_SV = tricontext, trinucleotideAlteration_SV = tricontext_sub) %>%
mutate(trinucleotideAltContext_SV = paste0(str_sub(trinucleotideContext_SV, 1, 1),
str_sub(trinucleotideAlteration_SV, 3, 3),
str_sub(trinucleotideContext_SV, 3, 3)),
ref = str_sub(trinucleotideAlteration_SV, 1, 1),
alt = str_sub(trinucleotideAlteration_SV, 3, 3)) %>%
as_tibble()
PTEN_protein_ref = translate(PTEN_ORF_bothways)
#Get coordinates for forward strand
tnt_coords_forward = list()
for (i in 1:nrow(tricontext)) {
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF))[[1]]
tnt_coords_forward = list.append(tnt_coords_forward,
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF))[[1]])
}
#Locations at reverse strand
tnt_coords_reverse = list()
for (i in 1:nrow(tricontext)) {
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]]
tnt_coords_reverse = list.append(tnt_coords_reverse,
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]])
}
#Get dN/dS ratio
non_syn = syn = 0
non_syn_prob = syn_prob = 0
#Forward chain
for (tnt_con in 1:length(tnt_coords_forward)) {
for (tnt_coord in 1:length(tnt_coords_forward[[tnt_con]])) {
PTEN_ORF_temp = PTEN_ORF
PTEN_ORF_temp = replaceLetterAt(PTEN_ORF_temp, tnt_coords_forward[[tnt_con]][tnt_coord][1]+1, tricontext$alt[tnt_con])
PTEN_ORF_temp = translate(PTEN_ORF_temp)
if (PTEN_ORF_temp == PTEN_protein_ref) {
syn_prob = syn_prob + tricontext$rel_prob[tnt_con]
syn = syn + 1
} else {
non_syn_prob = non_syn_prob + tricontext$rel_prob[tnt_con]
non_syn = non_syn + 1
}
}
}
#Reverse chain
for (tnt_con in 1:length(tnt_coords_reverse)) {
for (tnt_coord in 1:length(tnt_coords_reverse[[tnt_con]])) {
PTEN_ORF_temp = PTEN_ORF_comp
PTEN_ORF_temp = replaceLetterAt(PTEN_ORF_temp, tnt_coords_reverse[[tnt_con]][tnt_coord][1]+1, tricontext$alt[tnt_con])
PTEN_ORF_temp = reverseComplement(PTEN_ORF_temp)
PTEN_ORF_temp = translate(PTEN_ORF_temp)
if (PTEN_ORF_temp == PTEN_protein_ref) {
syn_prob = syn_prob + tricontext$rel_prob[tnt_con]
syn = syn + 1
} else {
non_syn_prob = non_syn_prob + tricontext$rel_prob[tnt_con]
non_syn = non_syn + 1
}
}
}
#Getting results
dN_dS_pred_plain = non_syn/syn
dN_dS_pred_corrected = non_syn_prob/syn_prob
ans_table = tibble(syn_count = syn, non_syn_count = non_syn, syn_prob = syn_prob,
non_syn_prob = non_syn_prob, dN_dS_pred_plain = dN_dS_pred_plain,
dN_dS_pred_corrected = dN_dS_pred_corrected)
return(ans_table)
}
read_csv("tricontext_MTL_prob.csv") %>%
get_dnds()
get_dnds <- function(filename) {
tricontext = filename
colnames(tricontext) = c("tricontext", "rel_prob")
tricontext = tricontext %>%
mutate(tricontext_sub = str_remove_all(str_extract_all(tricontext, "\\[.+\\]"), "\\[|\\]"),
tricontext = str_remove_all(str_remove_all(tricontext, ">.."), "\\[")) %>%
dplyr::rename(trinucleotideContext_SV = tricontext, trinucleotideAlteration_SV = tricontext_sub) %>%
mutate(trinucleotideAltContext_SV = paste0(str_sub(trinucleotideContext_SV, 1, 1),
str_sub(trinucleotideAlteration_SV, 3, 3),
str_sub(trinucleotideContext_SV, 3, 3)),
ref = str_sub(trinucleotideAlteration_SV, 1, 1),
alt = str_sub(trinucleotideAlteration_SV, 3, 3)) %>%
as_tibble()
PTEN_protein_ref = translate(PTEN_ORF)
#Get coordinates for forward strand
tnt_coords_forward = list()
for (i in 1:nrow(tricontext)) {
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF))[[1]]
tnt_coords_forward = list.append(tnt_coords_forward,
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF))[[1]])
}
#Locations at reverse strand
tnt_coords_reverse = list()
for (i in 1:nrow(tricontext)) {
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]]
tnt_coords_reverse = list.append(tnt_coords_reverse,
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]])
}
#Get dN/dS ratio
non_syn = syn = 0
non_syn_prob = syn_prob = 0
#Forward chain
for (tnt_con in 1:length(tnt_coords_forward)) {
for (tnt_coord in 1:length(tnt_coords_forward[[tnt_con]])) {
PTEN_ORF_temp = PTEN_ORF
PTEN_ORF_temp = replaceLetterAt(PTEN_ORF_temp, tnt_coords_forward[[tnt_con]][tnt_coord][1]+1, tricontext$alt[tnt_con])
PTEN_ORF_temp = translate(PTEN_ORF_temp)
if (PTEN_ORF_temp == PTEN_protein_ref) {
syn_prob = syn_prob + tricontext$rel_prob[tnt_con]
syn = syn + 1
} else {
non_syn_prob = non_syn_prob + tricontext$rel_prob[tnt_con]
non_syn = non_syn + 1
}
}
}
#Reverse chain
for (tnt_con in 1:length(tnt_coords_reverse)) {
for (tnt_coord in 1:length(tnt_coords_reverse[[tnt_con]])) {
PTEN_ORF_temp = PTEN_ORF_comp
PTEN_ORF_temp = replaceLetterAt(PTEN_ORF_temp, tnt_coords_reverse[[tnt_con]][tnt_coord][1]+1, tricontext$alt[tnt_con])
PTEN_ORF_temp = reverseComplement(PTEN_ORF_temp)
PTEN_ORF_temp = translate(PTEN_ORF_temp)
if (PTEN_ORF_temp == PTEN_protein_ref) {
syn_prob = syn_prob + tricontext$rel_prob[tnt_con]
syn = syn + 1
} else {
non_syn_prob = non_syn_prob + tricontext$rel_prob[tnt_con]
non_syn = non_syn + 1
}
}
}
#Getting results
dN_dS_pred_plain = non_syn/syn
dN_dS_pred_corrected = non_syn_prob/syn_prob
ans_table = tibble(syn_count = syn, non_syn_count = non_syn, syn_prob = syn_prob,
non_syn_prob = non_syn_prob, dN_dS_pred_plain = dN_dS_pred_plain,
dN_dS_pred_corrected = dN_dS_pred_corrected)
return(ans_table)
}
read_csv("tricontext_MTL_prob.csv") %>%
get_dnds()
library(rlist)
read_csv("tricontext_MTL_prob.csv") %>%
get_dnds()
get_dnds <- function(filename) {
tricontext = filename
colnames(tricontext) = c("tricontext", "rel_prob")
tricontext = tricontext %>%
mutate(tricontext_sub = str_remove_all(str_extract_all(tricontext, "\\[.+\\]"), "\\[|\\]"),
tricontext = str_remove_all(str_remove_all(tricontext, ">.."), "\\[")) %>%
dplyr::rename(trinucleotideContext_SV = tricontext, trinucleotideAlteration_SV = tricontext_sub) %>%
mutate(trinucleotideAltContext_SV = paste0(str_sub(trinucleotideContext_SV, 1, 1),
str_sub(trinucleotideAlteration_SV, 3, 3),
str_sub(trinucleotideContext_SV, 3, 3)),
ref = str_sub(trinucleotideAlteration_SV, 1, 1),
alt = str_sub(trinucleotideAlteration_SV, 3, 3)) %>%
as_tibble()
PTEN_protein_ref = translate(PTEN_ORF)
#Get coordinates for forward strand
tnt_coords_forward = list()
for (i in 1:nrow(tricontext)) {
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF))[[1]]
tnt_coords_forward = list.append(tnt_coords_forward,
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF))[[1]])
}
#Locations at reverse strand
tnt_coords_reverse = list()
for (i in 1:nrow(tricontext)) {
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]]
tnt_coords_reverse = list.append(tnt_coords_reverse,
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]])
}
#Get dN/dS ratio
non_syn = syn = 0
non_syn_prob = syn_prob = 0
#Forward chain
for (tnt_con in 1:length(tnt_coords_forward)) {
for (tnt_coord in 1:length(tnt_coords_forward[[tnt_con]])) {
PTEN_ORF_temp = PTEN_ORF
PTEN_ORF_temp = replaceLetterAt(PTEN_ORF_temp, tnt_coords_forward[[tnt_con]][tnt_coord][1]+1, tricontext$alt[tnt_con])
PTEN_ORF_temp = translate(PTEN_ORF_temp)
if (PTEN_ORF_temp == PTEN_protein_ref) {
syn_prob = syn_prob + tricontext$rel_prob[tnt_con]
syn = syn + 1
} else {
non_syn_prob = non_syn_prob + tricontext$rel_prob[tnt_con]
non_syn = non_syn + 1
}
}
}
#Reverse chain
for (tnt_con in 1:length(tnt_coords_reverse)) {
for (tnt_coord in 1:length(tnt_coords_reverse[[tnt_con]])) {
PTEN_ORF_temp = PTEN_ORF_comp
PTEN_ORF_temp = replaceLetterAt(PTEN_ORF_temp, tnt_coords_reverse[[tnt_con]][tnt_coord][1]+1, tricontext$alt[tnt_con])
PTEN_ORF_temp = reverseComplement(PTEN_ORF_temp)
PTEN_ORF_temp = translate(PTEN_ORF_temp)
if (PTEN_ORF_temp == PTEN_protein_ref) {
syn_prob = syn_prob + tricontext$rel_prob[tnt_con]
syn = syn + 1
} else {
non_syn_prob = non_syn_prob + tricontext$rel_prob[tnt_con]
non_syn = non_syn + 1
}
}
}
#Getting results
dN_dS_pred_plain = non_syn/syn
dN_dS_pred_corrected = non_syn_prob/syn_prob
ans_table = tibble(syn_count = syn, non_syn_count = non_syn, syn_prob = syn_prob,
non_syn_prob = non_syn_prob, dN_dS_pred_plain = dN_dS_pred_plain,
dN_dS_pred_corrected = dN_dS_pred_corrected)
return(ans_table)
}
read_csv("tricontext_MTL_prob.csv") %>%
get_dnds()
2908/722
31919/9272
tnt_coords_reverse = list()
for (i in 1:nrow(tricontext)) {
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]]
tnt_coords_reverse = list.append(tnt_coords_reverse,
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]])
}
tricontext = tricontext %>%
mutate(tricontext_sub = str_remove_all(str_extract_all(tricontext, "\\[.+\\]"), "\\[|\\]"),
tricontext = str_remove_all(str_remove_all(tricontext, ">.."), "\\[")) %>%
dplyr::rename(trinucleotideContext_SV = tricontext, trinucleotideAlteration_SV = tricontext_sub) %>%
mutate(trinucleotideAltContext_SV = paste0(str_sub(trinucleotideContext_SV, 1, 1),
str_sub(trinucleotideAlteration_SV, 3, 3),
str_sub(trinucleotideContext_SV, 3, 3)),
ref = str_sub(trinucleotideAlteration_SV, 1, 1),
alt = str_sub(trinucleotideAlteration_SV, 3, 3)) %>%
as_tibble()
tnt_coords_reverse = list()
for (i in 1:nrow(tricontext)) {
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]]
tnt_coords_reverse = list.append(tnt_coords_reverse,
gregexpr2(tricontext$trinucleotideContext_SV[i], toString(PTEN_ORF_comp))[[1]])
}
tnt_coords_reverse
tricontext
setwd("~/Google Drive/FMI_data_analysis")
GENIE_vs_TCGA = read_excel("PTEN GENIE vs TCGA CRC OS.xlsx")
fit_GENIE_vs_TCGA = surv_fit(Surv(time = Time_months, Status2) ~ Category, data = GENIE_vs_TCGA)
fit_GENIE_vs_TCGA = surv_fit(Surv(time = Time_months, Status2) ~ Category, data = GENIE_vs_TCGA)
ggsurvplot(
fit_GENIE,                     # survfit object with calculated statistics.
data = GENIE,             # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,300),         # present narrower X axis, but not affect
# survival estimates.
xlab = "Time in months",   # customize X axis label.
break.time.by = 50,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
fit_GENIE_vs_TCGA,                     # survfit object with calculated statistics.
data = GENIE_vs_TCGA,             # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,300),         # present narrower X axis, but not affect
# survival estimates.
xlab = "Time in months",   # customize X axis label.
break.time.by = 50,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
fit_GENIE_vs_TCGA,                     # survfit object with calculated statistics.
data = GENIE_vs_TCGA,             # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = F,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,200),         # present narrower X axis, but not affect
# survival estimates.
xlab = "Time in months",   # customize X axis label.
break.time.by = 50,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsave("CRC GENIE vs TCGA.png")
GENIE_vs_TCGA = read_excel("PTEN GENIE CRC OS_from Diagnosis_mod3.xlsx")
fit_GENIE_vs_TCGA = surv_fit(Surv(time = Time_months, Status2) ~ Category, data = GENIE_vs_TCGA)
fit_GENIE_vs_TCGA = surv_fit(Surv(time = Time_months, Status) ~ Category, data = GENIE_vs_TCGA)
ggsurvplot(
fit_GENIE_vs_TCGA,                     # survfit object with calculated statistics.
data = GENIE_vs_TCGA,             # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = F,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,200),         # present narrower X axis, but not affect
# survival estimates.
xlab = "Time in months",   # customize X axis label.
break.time.by = 50,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
surv_pvalue(
fit_GENIE_vs_TCGA,
data = GENIE_vs_TCGA,
method = "survdiff",)
fit_GENIE_vs_TCGA = surv_fit(Surv(time = Time_months, Status) ~ Source, data = GENIE_vs_TCGA)
ggsurvplot(
fit_GENIE_vs_TCGA,                     # survfit object with calculated statistics.
data = GENIE_vs_TCGA,             # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = F,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,200),         # present narrower X axis, but not affect
# survival estimates.
xlab = "Time in months",   # customize X axis label.
break.time.by = 50,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
surv_pvalue(
fit_GENIE_vs_TCGA,
data = GENIE_vs_TCGA,
method = "survdiff",)
ggsave("CRC GENIE vs TCGA.png")
ggsurvplot(
fit_GENIE_vs_TCGA,                     # survfit object with calculated statistics.
data = GENIE_vs_TCGA,             # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = T,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,200),         # present narrower X axis, but not affect
# survival estimates.
xlab = "Time in months",   # customize X axis label.
break.time.by = 50,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsave("CRC GENIE vs TCGA.png")
GENIE_vs_TCGA_PTENwt = GENIE_vs_TCGA %>% filter(Category = "PTEN_wt")
GENIE_vs_TCGA_PTENwt = GENIE_vs_TCGA %>% filter(Category == "PTEN_wt")
fit_GENIE_vs_TCGA = surv_fit(Surv(time = Time_months, Status) ~ Source, data = GENIE_vs_TCGA_PTENwt)
ggsurvplot(
fit_GENIE_vs_TCGA,                     # survfit object with calculated statistics.
data = GENIE_vs_TCGA_PTENwt,             # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = T,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,200),         # present narrower X axis, but not affect
# survival estimates.
xlab = "Time in months",   # customize X axis label.
break.time.by = 50,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
fit_GENIE_vs_TCGA = surv_fit(Surv(time = Time_months, Status) ~ Source, data = GENIE_vs_TCGA)
ggsurvplot(
fit_GENIE_vs_TCGA,                     # survfit object with calculated statistics.
data = GENIE_vs_TCGA,             # data used to fit survival curves.
pval = T,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimates of survival curves.
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0,200),         # present narrower X axis, but not affect
# survival estimates.
xlab = "Time in months",   # customize X axis label.
break.time.by = 50,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
# in legend of risk table
)
ggsave("CRC GENIE vs TCGA.png")
surv_pvalue(
fit_GENIE,
data = GENIE,
method = "survdiff",
)
setwd("~/Work/CBD_synergy_2022")
fadu_data = read_csv("CBD screening _3 hours reading_R1_111422_column format.csv")
problems()
fadu_data = read_excel("CBD screening _3 hours reading_R1_111422_column format.xlsx")
fadu_data %>% nrow()
12*96
fadu_dmso_wells = c(paste0("A",1:4))
fadu_dmso_wells
fadu_dmso_wells = c(paste0(LETTERS[1:4],1))
fadu_dmso_wells
fadu_dmso_wells1 = c(paste0(LETTERS[1:4],1))
fadu_dmso_wells2 = c(paste0(LETTERS[5:8],1))
fadu_dmso_wells2
fadu_dmso_wells2 = c(paste0(LETTERS[5:8],12))
fadu_dmso_wells2
fadu_staur_wells1 = c(paste0(LETTERS[5:8],1))
fadu_staur_wells2 = c(paste0(LETTERS[1:4],12))
fadu_dmso_wells = c(fadu_dmso_wells1,fadu_dmso_wells2)
fadu_dmso_wells
fadu_staur_wells = c(fadu_staur_wells1,fadu_staur_wells2)
fadu_data
cbd_plates = c(7:12)
ctrl_plates = c(1:6)
fadu_data %>% mutate(cbd = ifelse(Plate %in% cbd_plates, "cbd","control"))
fadu_data  = fadu_data %>% mutate(cbd = ifelse(Plate %in% cbd_plates, "cbd","control"))
fadu_data %>% mutate(comp = ifelse(Plate %in% c(1:3,7:9), 2,200))
fadu_data  = fadu_data %>% mutate(comp = ifelse(Plate %in% c(1:3,7:9), 2,200))
fadu_data
fadu_data %>% group_by(cbd,comp) %>% summarise(Avg = mean(Signal))
fadu_data_mean = fadu_data %>% group_by(Well,cbd,comp) %>% summarise(Avg = mean(Signal))
fadu_data_mean
# - - - - - - - - - - - - - - - - - - -
fadu_v1 = matrix(filter(fadu_data,comp == 2, cbd == "control")$Avg,8,12, byrow = T)
filter(fadu_data,comp == 2, cbd == "control")
# - - - - - - - - - - - - - - - - - - -
fadu_v1 = matrix(filter(fadu_data_mean,comp == 2, cbd == "control")$Avg,8,12, byrow = T)
fadu_v1
pheatmap(fadu_v1,cluster_rows = F,cluster_cols = F)
library(pheatmap)
pheatmap(fadu_v1,cluster_rows = F,cluster_cols = F)
fadu_v2 = matrix(filter(fadu_data_mean,comp == 200, cbd == "control")$Avg,8,12, byrow = T)
pheatmap(fadu_v2,cluster_rows = F,cluster_cols = F)
fadu_cbd1 = matrix(filter(fadu_data_mean,comp == 2, cbd == "cbd")$Avg,8,12, byrow = T)
pheatmap(fadu_cbd1,cluster_rows = F,cluster_cols = F)
fadu_cbd2 = matrix(filter(fadu_data_mean,comp == 200, cbd == "cbd")$Avg,8,12, byrow = T)
pheatmap(fadu_cbd2,cluster_rows = F,cluster_cols = F)
fadu_data_mean %>% pivot_wider(id_cols = cbd)
fadu_data_mean %>% pivot_wider(names_from = cbd)
fadu_data_mean %>% pivot_wider(names_from = cbd, values_from = Avg)
fadu_data_by_cbd = fadu_data_mean %>%
pivot_wider(names_from = cbd, values_from = Avg) %>%
mutate(ratio = cbd/control)
fadu_data_by_cbd
fadu_data_by_cbd2 = matrix(filter(fadu_data_mean,comp == 2)$ratio,8,12, byrow = T)
fadu_data_by_cbd2 = matrix(filter(fadu_data_by_cbd,comp == 2)$ratio,8,12, byrow = T)
pheatmap(fadu_data_by_cbd2,cluster_rows = F,cluster_cols = F)
fadu_data_by_cbd200 = matrix(filter(fadu_data_by_cbd,comp == 2)$ratio,8,12, byrow = T)
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F)
fadu_data_by_cbd200 = matrix(filter(fadu_data_by_cbd,comp == 200)$ratio,8,12, byrow = T)
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F)
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F,breaks = seq(1, 2, length.out = 100))
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F,breaks = seq(1, 2, length.out = 50))
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F,breaks = seq(-1, 2, length.out = 50))
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F,breaks = seq(1, 1.3, length.out = 50))
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F,breaks = seq(1, 1.3, length.out = 30))
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F,breaks = seq(1, 1.5, length.out = 100))
pheatmap(fadu_data_by_cbd2,cluster_rows = F,cluster_cols = F,breaks = seq(1, 1.5, length.out = 100))
pheatmap(fadu_v1,cluster_rows = F,cluster_cols = F,breaks = seq(50000, 250000, length.out = 100))
pheatmap(fadu_v2,cluster_rows = F,cluster_cols = F,breaks = seq(50000, 250000, length.out = 100))
pheatmap(fadu_cbd2,cluster_rows = F,cluster_cols = F, breaks = seq(50000, 250000, length.out = 100),  filename = "FADU run1 cbd comp_200nm avg.pdf")
pheatmap(fadu_cbd1,cluster_rows = F,cluster_cols = F, breaks = seq(50000, 250000, length.out = 100),  filename = "FADU run1 cbd comp_2nm avg.pdf")
fadu_data_mean %>%
pivot_wider(names_from = comp, values_from = Avg)
fadu_data_by_comp = fadu_data_mean %>%
pivot_wider(names_from = comp, values_from = Avg) %>%
mutate(ratio = '200'/'2')
fadu_data_mean %>%
pivot_wider(names_from = comp, values_from = Avg) %>% rename(comp2 = "2")
fadu_data_mean %>%
pivot_wider(names_from = comp, values_from = Avg) %>% colnames()
fadu_data_mean %>%
pivot_wider(names_from = comp, values_from = Avg) %>% rename(comp2 = '"2"')
fadu_data_by_comp = fadu_data_mean %>%
pivot_wider(names_from = comp, values_from = Avg) %>% rename(comp2 = '2')
fadu_data_by_comp = fadu_data_mean %>%
pivot_wider(names_from = comp, values_from = Avg)
colnames(fadu_data_by_comp) = c("Well", "cbd",  "comp_2",    "comp_200")
fadu_data_by_comp
fadu_data_by_comp = fadu_data_by_comp %>% mutate(ratio = comp_200/comp_2)
fadu_data_by_comp
fadu_data_by_comp_control = matrix(filter(fadu_data_by_cbd,cbd == "control")$ratio,8,12, byrow = T)
pheatmap(fadu_data_by_comp_control,cluster_rows = F,cluster_cols = F)
fadu_data_by_comp_control
fadu_data_by_comp_control = matrix(filter(fadu_data_by_comp,cbd == "control")$ratio,8,12, byrow = T)
pheatmap(fadu_data_by_comp_control,cluster_rows = F,cluster_cols = F)
fadu_data_by_comp_control
pheatmap(fadu_data_by_comp_control,cluster_rows = F,cluster_cols = F)
pheatmap(fadu_data_by_cbd200,cluster_rows = F,cluster_cols = F)
